{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"MLOps-RecSys Project","text":""},{"location":"ci-cd/","title":"CI/CD Pipeline","text":"<p>This project uses GitHub Actions for Continuous Integration and Continuous Deployment.</p>"},{"location":"ci-cd/#pipeline-overview","title":"Pipeline Overview","text":"<p>The CI/CD pipeline consists of the following jobs:</p> <ol> <li>Lint - Runs code quality checks</li> <li>Test - Runs unit tests</li> <li>Build and Publish Package - Builds and publishes the Python package to GitHub Registry</li> <li>Build and Publish Docker - Builds and publishes the Docker image to GitHub Container Registry</li> <li>Deploy GitHub Pages - Deploys documentation to GitHub Pages</li> </ol>"},{"location":"ci-cd/#pipeline-triggers","title":"Pipeline Triggers","text":"<p>The pipeline is triggered by:</p> <ul> <li>Push to main - Runs linting, testing, and GitHub Pages deployment</li> <li>Pull Requests to main - Runs linting and testing</li> <li>Tags starting with v* - Runs the complete pipeline, including package and Docker image publishing</li> </ul>"},{"location":"ci-cd/#github-actions-workflow","title":"GitHub Actions Workflow","text":"<p>The workflow is defined in <code>.github/workflows/ci.yml</code>.</p>"},{"location":"ci-cd/#linting-and-testing","title":"Linting and Testing","text":"<pre><code>lint:\n  runs-on: ubuntu-latest\n  steps:\n    - uses: actions/checkout@v4\n    - name: Set up Python\n      uses: actions/setup-python@v4\n      with:\n        python-version: '3.11'\n    - name: Install Poetry\n      uses: snok/install-poetry@v1\n    - name: Install dependencies\n      run: poetry install --no-interaction --no-root\n    - name: Run Black\n      run: poetry run black . --check\n    - name: Run Ruff\n      run: poetry run ruff .\n    - name: Run MyPy\n      run: poetry run mypy .\n</code></pre>"},{"location":"ci-cd/#docker-image-publishing","title":"Docker Image Publishing","text":"<p>The workflow builds and publishes the Docker image to GitHub Container Registry when tags are pushed:</p> <pre><code># Tag a new version\ngit tag v0.1.0\ngit push origin v0.1.0\n</code></pre>"},{"location":"docker/","title":"Docker Configuration","text":"<p>This project uses Docker for containerization, providing consistent development and production environments.</p>"},{"location":"docker/#docker-images","title":"Docker Images","text":"<p>The project has a multi-stage Dockerfile that creates two types of images:</p> <ol> <li>Development Image - Includes all dependencies, including development tools.</li> <li>Production Image - Contains only the necessary production dependencies.</li> </ol>"},{"location":"docker/#using-docker-compose","title":"Using Docker Compose","text":""},{"location":"docker/#development-environment","title":"Development Environment","text":"<p>To start a development environment with Docker:</p> <pre><code>docker-compose up dev\n</code></pre> <p>This will: - Build the development Docker image - Mount your local directory to the container - Start a bash shell for development work</p>"},{"location":"docker/#running-the-application","title":"Running the Application","text":"<p>To run the application in a production-like environment:</p> <pre><code>docker-compose up app\n</code></pre>"},{"location":"setup/","title":"Project Setup","text":""},{"location":"setup/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.11+</li> <li>Poetry</li> <li>Docker and Docker Compose (for containerization)</li> <li>Git</li> </ul>"},{"location":"setup/#installation","title":"Installation","text":""},{"location":"setup/#installation-with-docker","title":"Installation with Docker","text":"<pre><code># Clone the repository\ngit clone https://github.com/Mihail-Olegovich/MLOps-RecSys.git\ncd MLOps-RecSys\n\n# Build and run with Docker Compose\ndocker-compose up dev\n</code></pre>"},{"location":"setup/#project-structure","title":"Project Structure","text":"<pre><code>MLOps-RecSys/\n\u251c\u2500\u2500 .github/           # GitHub Actions configurations\n\u251c\u2500\u2500 docs/              # Project documentation\n\u251c\u2500\u2500 mloprec/           # Main project code\n\u251c\u2500\u2500 tests/             # Tests\n\u251c\u2500\u2500 .pre-commit-config.yaml\n\u251c\u2500\u2500 .gitignore\n\u251c\u2500\u2500 docker-compose.yml\n\u251c\u2500\u2500 Dockerfile\n\u251c\u2500\u2500 Makefile\n\u251c\u2500\u2500 pyproject.toml\n\u2514\u2500\u2500 README.md\n</code></pre>"},{"location":"workflow/","title":"GitHub Flow","text":"<p>This project follows the GitHub Flow model, which consists of the following steps:</p>"},{"location":"workflow/#workflow-steps","title":"Workflow Steps","text":"<ol> <li>Create a branch: Branch off from <code>main</code> with a descriptive name (e.g., <code>feature/add-login</code>).</li> <li>Make changes: Commit logical, atomic changes with clear messages.</li> <li>Open a Pull Request: Push your branch and open a PR against <code>main</code>.</li> <li>Collaborate and review: Request reviews, discuss changes, and address feedback.</li> <li>Ensure CI passes: Wait for automated tests and lint checks to succeed.</li> <li>Merge the Pull Request: Once approved, merge into <code>main</code> (using merge commit or squash merge).</li> <li>Deploy: Deploy the updated <code>main</code> branch to the production environment.</li> <li>Clean up: Delete the feature branch locally and remotely after merging.</li> </ol>"},{"location":"workflow/#creating-a-branch","title":"Creating a Branch","text":"<pre><code># Ensure you have the latest main branch\ngit checkout main\ngit pull origin main\n\n# Create a new feature branch\ngit checkout -b feature/new-feature\n</code></pre>"},{"location":"workflow/#making-changes","title":"Making Changes","text":"<pre><code># Make your changes and commit them\ngit add .\ngit commit -m \"feat: add new feature\"\n\n# Push your branch to GitHub\ngit push -u origin feature/new-feature\n</code></pre>"},{"location":"workflow/#opening-a-pull-request","title":"Opening a Pull Request","text":"<ol> <li>Go to the repository on GitHub</li> <li>Click \"Pull requests\" &gt; \"New pull request\"</li> <li>Select your branch as the compare branch</li> <li>Fill in the PR template with details about your changes</li> <li>Submit the pull request</li> </ol>"},{"location":"workflow/#after-merge","title":"After Merge","text":"<pre><code># Switch back to main\ngit checkout main\ngit pull origin main\n\n# Delete the local branch\ngit branch -d feature/new-feature\n\n# Delete the remote branch (optional)\ngit push origin --delete feature/new-feature\n</code></pre>"}]}